print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PHOTO, SIZE, FORMAT, DETAILS, CONFIRM = range(5)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
ADMIN_CHAT_ID = "439141567"

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.effective_user.full_name
    context.user_data['username'] = update.effective_user.username
    context.user_data['date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—à–∏–≤–∫–∏.")
    return PHOTO

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª)
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        context.user_data['photo_id'] = update.message.document.file_id
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª).")
        return PHOTO

    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10x15 —Å–º)")
    return SIZE

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
async def receive_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['size'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –≤–∞–º –Ω—É–∂–µ–Ω? (–Ω–∞–ø—Ä–∏–º–µ—Ä: DST, PES)")
    return FORMAT

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
async def receive_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['format'] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?")
    return DETAILS

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def receive_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['details'] = update.message.text

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    summary = (
        f"üìå –ó–∞–∫–∞–∑:\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìÖ –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"üìê –†–∞–∑–º–µ—Ä: {context.user_data['size']}\n"
        f"üìÅ –§–æ—Ä–º–∞—Ç: {context.user_data['format']}\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {context.user_data['details']}\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRM

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm":
        save_order_to_excel(context.user_data)

        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=context.user_data['photo_id'],
            caption=(
                f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{context.user_data['username']}:\n"
                f"–ò–º—è: {context.user_data['name']}\n"
                f"–î–∞—Ç–∞: {context.user_data['date']}\n"
                f"–†–∞–∑–º–µ—Ä: {context.user_data['size']}\n"
                f"–§–æ—Ä–º–∞—Ç: {context.user_data['format']}\n"
                f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {context.user_data['details']}"
            )
        )

        await query.edit_message_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    else:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")

    return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Excel
def save_order_to_excel(data):
    file_name = "orders.xlsx"
    if os.path.exists(file_name):
        wb = load_workbook(file_name)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        ws.append(["–ò–º—è", "Username", "–î–∞—Ç–∞", "–†–∞–∑–º–µ—Ä", "–§–æ—Ä–º–∞—Ç", "–ü–æ–∂–µ–ª–∞–Ω–∏—è", "ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"])

    ws.append([
        data.get("name", ""),
        data.get("username", ""),
        data.get("date", ""),
        data.get("size", ""),
        data.get("format", ""),
        data.get("details", ""),
        data.get("photo_id", "")
    ])
    wb.save(file_name)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
import os
app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        PHOTO: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, receive_photo)],
        SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_size)],
        FORMAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_format)],
        DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_details)],
        CONFIRM: [CallbackQueryHandler(confirm_order)],
    },
    fallbacks=[]
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
app.add_handler(conv_handler)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL webhook ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å HTTPS
WEBHOOK_URL = "https://embgallery.com/"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 10000)),
    webhook_url=WEBHOOK_URL
)


